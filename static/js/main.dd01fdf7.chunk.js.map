{"version":3,"sources":["Component/Navbar.js","Component/TextForm.js","Component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","btn","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","disabled","length","btnColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","defaultProps","aboutText","Alert","height","alert","role","word","lower","charAt","slice","capital","msg","App","setmode","setbtnState","setbtnColor","setalert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAIe,SAASA,EAAOC,GAE3B,OACI,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACA,sBAAKD,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACA,sBAAMJ,UAAU,0BAEhB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACA,qBAAIL,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SAEA,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,oBAEA,oBAAIF,UAAU,gBAId,sBAAKA,UAAS,sCAAiC,SAAAD,EAAME,KAAN,gBAA/C,UACI,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,WAAYH,KAAK,WAAWC,GAAG,2BAClF,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAA5C,SAAsET,EAAMU,iBCvBjF,SAASC,EAASX,GAE7B,MAAwBY,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA0CA,OACI,qCACA,sBAAKb,UAAU,YAAYc,MAAO,CAACC,MAAoB,SAAbhB,EAAME,KAAc,QAAQ,SAAtE,UACI,oBAAID,UAAU,OAAd,SAAsBD,EAAMiB,UAC5B,qBAAKhB,UAAU,OAAf,SACI,0BACIA,UAAU,eACVK,GAAG,QACHY,MAAOL,EAEPM,SAfO,SAACC,GAEpBN,EAAQM,EAAMC,OAAOH,QAcTI,KAAK,QAGb,wBAAQC,SAAwB,IAAdV,EAAKW,OAAYnB,KAAK,SAASJ,UAAS,kBAAaD,EAAMyB,SAAnB,cAAyClB,QAtDrF,WAElB,IAAImB,EAAUb,EAAKc,cACnBb,EAAQY,GACR1B,EAAM4B,UAAU,yBAAyB,YAkDrC,kCACA,wBAAQL,SAAwB,IAAdV,EAAKW,OAAYnB,KAAK,SAASJ,UAAS,kBAAaD,EAAMyB,SAAnB,cAAyClB,QAhDrF,WAElB,IAAImB,EAAUb,EAAKgB,cACnBf,EAAQY,GACR1B,EAAM4B,UAAU,yBAAyB,YA4CrC,kCACA,wBAAQL,SAAwB,IAAdV,EAAKW,OAAYnB,KAAK,SAASJ,UAAS,kBAAaD,EAAMyB,SAAnB,cAAyClB,QA1CpF,WAGnBO,EADc,IAEdd,EAAM4B,UAAU,eAAe,YAsC3B,wBACA,wBAAQL,SAAwB,IAAdV,EAAKW,OAAYnB,KAAK,SAASJ,UAAS,kBAAaD,EAAMyB,SAAnB,cAAyClB,QApCxF,WACf,IAAIM,EAAOiB,SAASC,eAAe,SACnClB,EAAKmB,SACLC,UAAUC,UAAUC,UAAUtB,EAAKK,OACnCY,SAASM,eAAeC,kBACxBrC,EAAM4B,UAAU,sBAAsB,YA+BlC,uBACA,wBAAQL,SAAwB,IAAdV,EAAKW,OAAYnB,KAAK,SAASJ,UAAS,kBAAaD,EAAMyB,SAAnB,cAAyClB,QA7BjF,WACtB,IAAImB,EAAUb,EAAKyB,MAAM,QACzBxB,EAAQY,EAAQa,KAAK,MACrBvC,EAAM4B,UAAU,sBAAsB,YA0BlC,mCAIJ,sBAAK3B,UAAU,iBAAkBc,MAAO,CAACC,MAAoB,SAAbhB,EAAME,KAAc,QAAQ,SAA5E,UACI,mDACA,oDAAuBW,EAAKW,UAC5B,+CAAkBX,EAAKyB,MAAM,KAAKE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQjB,UAAaA,UACjF,8BAAI,KAAQX,EAAKyB,MAAM,KAAKE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQjB,UAAaA,OAA3E,mBACA,yCACA,4BAAIX,EAAKW,OAAO,EAAEX,EAAK,6BDpCnCd,EAAO2C,aAAe,CAClBtC,MAAO,iBACPuC,UAAW,SErBAC,MAjBf,SAAe5C,GAKb,OACE,qBAAKe,MAAO,CAAC8B,OAAQ,QAArB,SAEI7C,EAAM8C,OACN,sBAAK7C,UAAS,sBAAiBD,EAAM8C,MAAMzC,KAA7B,gCAAiE0C,KAAK,QAApF,UACA,iCATU,SAACC,GACf,IAAMC,EAAQD,EAAKnB,cACnB,OAAOoB,EAAMC,OAAO,GAAGvB,cAAgBsB,EAAME,MAAM,GAOtCC,CAAQpD,EAAM8C,MAAMzC,QAD7B,KAC+CL,EAAM8C,MAAMO,UC8CpDC,MA/Cf,WACE,MAAwB1C,mBAAS,SAAjC,mBAAOV,EAAP,KAAaqD,EAAb,KAEA,EAAgC3C,mBAAS,mBAAzC,mBAAiB4C,GAAjB,WAEA,EAAgC5C,mBAAS,QAAzC,mBAAOa,EAAP,KAAiBgC,EAAjB,KAEA,EAA0B7C,mBAAS,MAAnC,mBAAOkC,EAAP,KAAcY,EAAd,KAEM9B,EAAY,SAAC+B,EAAStD,GAC1BqD,EAAS,CACLL,IAAKM,EACLtD,KAAMA,IAEVuD,YAAW,WACTF,EAAS,QACR,OAmBL,OACE,qCACE,cAAC3D,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAlBvB,WACL,SAATN,GACDqD,EAAQ,SACR3B,EAAU,8BAA8B,WACxC6B,EAAY,QACZD,EAAY,mBACZ1B,SAAS+B,KAAK9C,MAAM+C,gBAAkB,UAEtCP,EAAQ,QACR3B,EAAU,6BAA6B,WACvC6B,EAAY,SACZD,EAAY,oBACZ1B,SAAS+B,KAAK9C,MAAM+C,gBAAkB,YAMwBnB,UAAU,oBACxE,cAAC,EAAD,CAAOG,MAAOA,IACd,qBAAK7C,UAAU,iBAAf,SACA,cAACU,EAAD,CAAUiB,UAAWA,EAAWX,QAAQ,mCAAmCf,KAAMA,EAAMuB,SAAUA,UCvCxFsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAASC,eAAe,SAM1BgC,K","file":"static/js/main.dd01fdf7.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href='#'>{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href='#'>Home</a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                </li>\r\n            </ul>\r\n                <div className={`form-check form-switch text-${props.mode === `dark`?`light`:`dark`}`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.btn}</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n};","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    }\r\n\r\n    const handleClrClick = ()=>{\r\n        // console.log(\"Upper case was clicked\" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to clipboard\",\"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra space removed\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h1 className='mb-4'>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea \r\n                    className=\"form-control\" \r\n                    id=\"myBox\" \r\n                    value={text}\r\n                    // style={{background: props.mode === 'dark'?'grey':'white', color: props.mode === 'dark'?'white':'black'}}\r\n                    onChange={handleOnChange}\r\n                    rows=\"8\">\r\n                </textarea>\r\n            </div>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.btnColor} mx-2 my-2`} onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.btnColor} mx-2 my-2`} onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.btnColor} mx-2 my-2`} onClick={handleClrClick}>Clear Text</button>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.btnColor} mx-2 my-2`} onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.btnColor} mx-2 my-2`} onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n\r\n\r\n        </div>\r\n        <div className=\"container my-3\"  style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>Total Characters = {text.length}</p>\r\n            <p>Total Words = {text.split(\" \").filter((element)=>{return element.length!==0}).length}</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes Read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capital = (word)=>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n      {\r\n        props.alert && \r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capital(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport Navbar from \"./Component/Navbar\";\nimport TextForm from \"./Component/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./Component/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n\n  const [btnState, setbtnState] = useState(\"Enable Darkmode\");\n\n  const [btnColor, setbtnColor] = useState(\"dark\");\n\n  const [alert, setalert] = useState(null)\n\n  const showAlert = (message, type)=>{\n    setalert({\n        msg: message,\n        type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === \"dark\"){\n      setmode(\"light\");\n      showAlert(\"Dark mode has been disabled\",\"success\");\n      setbtnColor(\"dark\");\n      setbtnState(\"Enable Darkmode\");\n      document.body.style.backgroundColor = 'white';\n    }else{\n      setmode(\"dark\");\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      setbtnColor(\"light\");\n      setbtnState(\"Disable Darkmode\");\n      document.body.style.backgroundColor = '#042743';\n    }\n  };\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} aboutText=\"About TextUtils\"/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyzse below\" mode={mode} btnColor={btnColor} />\n      </div>\n\n       </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}